# The base image we want to inherit from
FROM python:3.11-slim-buster




ARG DJANGO_ENV

ENV DJANGO_ENV=${DJANGO_ENV} \
  # python:
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  # pip:
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100 \
  # poetry:
  POETRY_VERSION=1.2.2 \
  #wnat to make thsi true again and also make user thing work on top, try with false and see if project runs, if yes then good and then do devcon
  POETRY_VIRTUALENVS_IN_PROJECT=false \
  POETRY_VIRTUALENVS_CREATE=false



# System deps:
RUN apt-get update \
  && apt-get install --no-install-recommends -y \
    bash \
    build-essential \
    curl \
    gettext \
    git \
    libpq-dev \
    wget \
  # Cleaning cache:
  && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# Update package list and install SQLite from backports (if available)
RUN apt-get update && apt-get install -y \
    sqlite3 \
    && apt-get install -y -t buster-backports sqlite3

# Verify SQLite installation
RUN sqlite3 --version



RUN useradd -d /home/docker -m -s /bin/bash docker && \
        echo "docker:docker" | chpasswd && \
        adduser docker sudo

# WORKDIR /home/docker
RUN mkdir /app
RUN mkdir /app/staticfiles
RUN mkdir /app/mediafiles


WORKDIR /app


RUN curl -sSL https://install.python-poetry.org | python3 -

ENV PATH="${PATH}:/root/.local/bin"
RUN echo "${PATH}:/root/.local/bin"


COPY pyproject.toml poetry.lock /app/
USER root
RUN poetry install
COPY . /app
# USER docker
#ENV PATH="/app/.venv/bin:$PATH"
ENV HOME=/home

# RUN chown -R docker:docker $HOME/app

# RUN chown -R docker:docker /home/docker
RUN chown -R docker:docker /app

# RUN chmod 777 /app
# RUN chmod 777 /app

USER docker
#Only need if using .venv from poetry
#RUN ["/bin/bash", "-c", "source '/app/.venv/bin/activate'"]
CMD ["bash"]
